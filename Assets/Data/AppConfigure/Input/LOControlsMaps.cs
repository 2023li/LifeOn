//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Data/AppConfigure/Input/LOControlsMaps.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @LOControlsMaps: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @LOControlsMaps()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""LOControlsMaps"",
    ""maps"": [
        {
            ""name"": ""Global"",
            ""id"": ""1b1d950e-8aa1-4c73-897b-68de5b53714c"",
            ""actions"": [
                {
                    ""name"": ""MousePostionChange"",
                    ""type"": ""PassThrough"",
                    ""id"": ""cc610a03-6c03-4542-b70e-14f2c98d729b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseWheelChanges"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d2f8fabe-1fc4-4f17-b5a0-d4e9d71d2d6f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""543ed556-24bd-4887-82c9-1c67b4fb98fa"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c211fcf5-bb50-4d74-bf4f-a26beeac9d35"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePostionChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa1c9b05-6a49-4a34-aab4-f908665770a0"",
                    ""path"": ""<Pointer>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseWheelChanges"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f5d485da-b623-4c9e-acb9-0f4a03af8ce2"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GamePlay"",
            ""id"": ""6bbfc787-7db4-4f68-a313-9f53a9526d3c"",
            ""actions"": [
                {
                    ""name"": ""MoveCamera"",
                    ""type"": ""Button"",
                    ""id"": ""65e78664-ae97-4a2b-ac1d-65541f77fbaf"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7d664e9c-25f0-45a6-bb78-575cc44b051d"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""d801d8c9-05ad-45bc-9b19-cd4e4abb1c22"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""f2ed592b-c02e-4872-b68d-70367edcbefa"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ce95ad3e-699b-4dde-b34f-65af9cafa147"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Building"",
            ""id"": ""53e8dde2-50bd-4a5c-8dec-ff1adcfc713b"",
            ""actions"": [
                {
                    ""name"": ""ConfirmPlacement"",
                    ""type"": ""Button"",
                    ""id"": ""99d90692-898e-4cd4-b992-33109b4f4c24"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ConfirmConstruction"",
                    ""type"": ""Button"",
                    ""id"": ""db6cb01c-dccd-4bb4-b656-df400be366c5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e9058c1e-aa67-4ab3-88fd-8060fb1b93b1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ConfirmPlacement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aa9d2805-64cd-431c-afe6-79f6d21e361c"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ConfirmConstruction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Global
        m_Global = asset.FindActionMap("Global", throwIfNotFound: true);
        m_Global_MousePostionChange = m_Global.FindAction("MousePostionChange", throwIfNotFound: true);
        m_Global_MouseWheelChanges = m_Global.FindAction("MouseWheelChanges", throwIfNotFound: true);
        m_Global_Back = m_Global.FindAction("Back", throwIfNotFound: true);
        // GamePlay
        m_GamePlay = asset.FindActionMap("GamePlay", throwIfNotFound: true);
        m_GamePlay_MoveCamera = m_GamePlay.FindAction("MoveCamera", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Newaction = m_UI.FindAction("New action", throwIfNotFound: true);
        // Building
        m_Building = asset.FindActionMap("Building", throwIfNotFound: true);
        m_Building_ConfirmPlacement = m_Building.FindAction("ConfirmPlacement", throwIfNotFound: true);
        m_Building_ConfirmConstruction = m_Building.FindAction("ConfirmConstruction", throwIfNotFound: true);
    }

    ~@LOControlsMaps()
    {
        UnityEngine.Debug.Assert(!m_Global.enabled, "This will cause a leak and performance issues, LOControlsMaps.Global.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_GamePlay.enabled, "This will cause a leak and performance issues, LOControlsMaps.GamePlay.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_UI.enabled, "This will cause a leak and performance issues, LOControlsMaps.UI.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Building.enabled, "This will cause a leak and performance issues, LOControlsMaps.Building.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Global
    private readonly InputActionMap m_Global;
    private List<IGlobalActions> m_GlobalActionsCallbackInterfaces = new List<IGlobalActions>();
    private readonly InputAction m_Global_MousePostionChange;
    private readonly InputAction m_Global_MouseWheelChanges;
    private readonly InputAction m_Global_Back;
    public struct GlobalActions
    {
        private @LOControlsMaps m_Wrapper;
        public GlobalActions(@LOControlsMaps wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePostionChange => m_Wrapper.m_Global_MousePostionChange;
        public InputAction @MouseWheelChanges => m_Wrapper.m_Global_MouseWheelChanges;
        public InputAction @Back => m_Wrapper.m_Global_Back;
        public InputActionMap Get() { return m_Wrapper.m_Global; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GlobalActions set) { return set.Get(); }
        public void AddCallbacks(IGlobalActions instance)
        {
            if (instance == null || m_Wrapper.m_GlobalActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GlobalActionsCallbackInterfaces.Add(instance);
            @MousePostionChange.started += instance.OnMousePostionChange;
            @MousePostionChange.performed += instance.OnMousePostionChange;
            @MousePostionChange.canceled += instance.OnMousePostionChange;
            @MouseWheelChanges.started += instance.OnMouseWheelChanges;
            @MouseWheelChanges.performed += instance.OnMouseWheelChanges;
            @MouseWheelChanges.canceled += instance.OnMouseWheelChanges;
            @Back.started += instance.OnBack;
            @Back.performed += instance.OnBack;
            @Back.canceled += instance.OnBack;
        }

        private void UnregisterCallbacks(IGlobalActions instance)
        {
            @MousePostionChange.started -= instance.OnMousePostionChange;
            @MousePostionChange.performed -= instance.OnMousePostionChange;
            @MousePostionChange.canceled -= instance.OnMousePostionChange;
            @MouseWheelChanges.started -= instance.OnMouseWheelChanges;
            @MouseWheelChanges.performed -= instance.OnMouseWheelChanges;
            @MouseWheelChanges.canceled -= instance.OnMouseWheelChanges;
            @Back.started -= instance.OnBack;
            @Back.performed -= instance.OnBack;
            @Back.canceled -= instance.OnBack;
        }

        public void RemoveCallbacks(IGlobalActions instance)
        {
            if (m_Wrapper.m_GlobalActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGlobalActions instance)
        {
            foreach (var item in m_Wrapper.m_GlobalActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GlobalActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GlobalActions @Global => new GlobalActions(this);

    // GamePlay
    private readonly InputActionMap m_GamePlay;
    private List<IGamePlayActions> m_GamePlayActionsCallbackInterfaces = new List<IGamePlayActions>();
    private readonly InputAction m_GamePlay_MoveCamera;
    public struct GamePlayActions
    {
        private @LOControlsMaps m_Wrapper;
        public GamePlayActions(@LOControlsMaps wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveCamera => m_Wrapper.m_GamePlay_MoveCamera;
        public InputActionMap Get() { return m_Wrapper.m_GamePlay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamePlayActions set) { return set.Get(); }
        public void AddCallbacks(IGamePlayActions instance)
        {
            if (instance == null || m_Wrapper.m_GamePlayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GamePlayActionsCallbackInterfaces.Add(instance);
            @MoveCamera.started += instance.OnMoveCamera;
            @MoveCamera.performed += instance.OnMoveCamera;
            @MoveCamera.canceled += instance.OnMoveCamera;
        }

        private void UnregisterCallbacks(IGamePlayActions instance)
        {
            @MoveCamera.started -= instance.OnMoveCamera;
            @MoveCamera.performed -= instance.OnMoveCamera;
            @MoveCamera.canceled -= instance.OnMoveCamera;
        }

        public void RemoveCallbacks(IGamePlayActions instance)
        {
            if (m_Wrapper.m_GamePlayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGamePlayActions instance)
        {
            foreach (var item in m_Wrapper.m_GamePlayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GamePlayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GamePlayActions @GamePlay => new GamePlayActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Newaction;
    public struct UIActions
    {
        private @LOControlsMaps m_Wrapper;
        public UIActions(@LOControlsMaps wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_UI_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);

    // Building
    private readonly InputActionMap m_Building;
    private List<IBuildingActions> m_BuildingActionsCallbackInterfaces = new List<IBuildingActions>();
    private readonly InputAction m_Building_ConfirmPlacement;
    private readonly InputAction m_Building_ConfirmConstruction;
    public struct BuildingActions
    {
        private @LOControlsMaps m_Wrapper;
        public BuildingActions(@LOControlsMaps wrapper) { m_Wrapper = wrapper; }
        public InputAction @ConfirmPlacement => m_Wrapper.m_Building_ConfirmPlacement;
        public InputAction @ConfirmConstruction => m_Wrapper.m_Building_ConfirmConstruction;
        public InputActionMap Get() { return m_Wrapper.m_Building; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BuildingActions set) { return set.Get(); }
        public void AddCallbacks(IBuildingActions instance)
        {
            if (instance == null || m_Wrapper.m_BuildingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BuildingActionsCallbackInterfaces.Add(instance);
            @ConfirmPlacement.started += instance.OnConfirmPlacement;
            @ConfirmPlacement.performed += instance.OnConfirmPlacement;
            @ConfirmPlacement.canceled += instance.OnConfirmPlacement;
            @ConfirmConstruction.started += instance.OnConfirmConstruction;
            @ConfirmConstruction.performed += instance.OnConfirmConstruction;
            @ConfirmConstruction.canceled += instance.OnConfirmConstruction;
        }

        private void UnregisterCallbacks(IBuildingActions instance)
        {
            @ConfirmPlacement.started -= instance.OnConfirmPlacement;
            @ConfirmPlacement.performed -= instance.OnConfirmPlacement;
            @ConfirmPlacement.canceled -= instance.OnConfirmPlacement;
            @ConfirmConstruction.started -= instance.OnConfirmConstruction;
            @ConfirmConstruction.performed -= instance.OnConfirmConstruction;
            @ConfirmConstruction.canceled -= instance.OnConfirmConstruction;
        }

        public void RemoveCallbacks(IBuildingActions instance)
        {
            if (m_Wrapper.m_BuildingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBuildingActions instance)
        {
            foreach (var item in m_Wrapper.m_BuildingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BuildingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BuildingActions @Building => new BuildingActions(this);
    public interface IGlobalActions
    {
        void OnMousePostionChange(InputAction.CallbackContext context);
        void OnMouseWheelChanges(InputAction.CallbackContext context);
        void OnBack(InputAction.CallbackContext context);
    }
    public interface IGamePlayActions
    {
        void OnMoveCamera(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IBuildingActions
    {
        void OnConfirmPlacement(InputAction.CallbackContext context);
        void OnConfirmConstruction(InputAction.CallbackContext context);
    }
}
